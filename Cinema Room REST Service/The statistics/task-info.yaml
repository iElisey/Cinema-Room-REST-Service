type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";
        private static final String WRONG_PASSWORD_MESSAGE = "The password is wrong!";

        private static final Gson gson = new Gson();

        private static String token = "";

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testStatsEndpoint() {

            HttpResponse response = post("/stats", "").send();
            checkStatusCode(response, 401);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_PASSWORD_MESSAGE)
                    .anyOtherValues()
            );


            return CheckResult.correct();
        }

        CheckResult testStats(int numberOfPurchasedTickets, int currentIncome, int availableSeats) {
            Map<String, String> requestParams = Map.of("password", "super_secret");
            HttpResponse response = post("/stats", requestParams).send();
            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("number_of_purchased_tickets", numberOfPurchasedTickets)
                    .value("current_income", currentIncome)
                    .value("number_of_available_seats", availableSeats)
            );

            return CheckResult.correct();
        }

        CheckResult returnTicket() {
            HttpResponse response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", token
                ))
            ).send();

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 7)
                            .value("column", 4)
                            .value("price", 8)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testPurchaseAnotherTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "7",
                    "column", "4"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 7)
                                .value("column", 4)
                                .value("price", 8)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket,
            this::testStatsEndpoint,
            () -> testStats(1, 10, 80),
            this::testPurchaseAnotherTicket,
            () -> testStats(2, 18, 79),
            this::returnTicket,
            () -> testStats(1, 10, 80),
        };
    }
  learner_created: false
- name: src/cinema/domain/Views.java
  visible: true
  text: |
    package cinema.domain;

    public class Views {
        public interface RowColumnPrice{}
        public interface Full {}
    }
  learner_created: true
- name: src/cinema/controllers/RestErrorHandler.java
  visible: true
  text: |-
    package cinema.controllers;

    import cinema.BuiyngException;
    import cinema.domain.ApiError;
    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ControllerAdvice;
    import org.springframework.web.bind.annotation.ExceptionHandler;
    import org.springframework.web.bind.annotation.ResponseBody;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ControllerAdvice
    public class RestErrorHandler {

        @ExceptionHandler(BuiyngException.class)
        @ResponseStatus(HttpStatus.BAD_REQUEST)
        @ResponseBody
        public ApiError handleBuyingException(BuiyngException e) {
            return new ApiError(e.getMessage());
        }

        @ExceptionHandler(ArrayIndexOutOfBoundsException.class)
        @ResponseStatus(HttpStatus.BAD_REQUEST)
        @ResponseBody
        public ApiError handleBuyingException(ArrayIndexOutOfBoundsException e) {
            return new ApiError(e.getMessage());
        }

    }
  learner_created: true
- name: src/cinema/serialization/TicketSerialization.java
  visible: true
  text: |
    package cinema.serialization;

    import cinema.domain.Ticket;
    import com.google.gson.JsonElement;
    import com.google.gson.JsonObject;
    import com.google.gson.JsonSerializationContext;
    import com.google.gson.JsonSerializer;

    import java.lang.reflect.Type;

    public class TicketSerialization implements JsonSerializer<Ticket> {


        @Override
        public JsonElement serialize(Ticket ticket,
                                     Type typeOfSrc,
                                     JsonSerializationContext context) {
            JsonObject seatObj = new JsonObject();
            seatObj.addProperty("row", ticket.getRow());
            seatObj.addProperty("column", ticket.getColumn());
            seatObj.addProperty("price", ticket.getPrice());
            return seatObj;
        }
    }
  learner_created: true
- name: src/cinema/domain/ReturnedTicket.java
  visible: true
  text: |
    package cinema.domain;

    import com.fasterxml.jackson.annotation.JsonRootName;
    import com.fasterxml.jackson.annotation.JsonTypeInfo;
    import com.fasterxml.jackson.annotation.JsonTypeName;

    @JsonTypeInfo(include = JsonTypeInfo.As.WRAPPER_OBJECT, use = JsonTypeInfo.Id.NAME)
    @JsonTypeName("returned_ticket")
    public class ReturnedTicket {
        private int row;
        private int column;
        private int price;

        public ReturnedTicket() {
        }

        public ReturnedTicket(int row, int column, int price) {
            this.row = row;
            this.column = column;
            this.price = price;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }

        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getPrice() {
            return price;
        }

        public void setPrice(int price) {
            this.price = price;
        }
    }
  learner_created: true
- name: src/cinema/domain/ApiError.java
  visible: true
  text: |-
    package cinema.domain;
    public class ApiError {

        private String error;

        public ApiError(String error) {
            this.error = error;
        }

        public String getError() {
            return error;
        }

        public void setError(String error) {
            this.error = error;
        }
    }
  learner_created: true
- name: src/cinema/controllers/CinemaController.java
  visible: true
  text: |
    package cinema.controllers;

    import cinema.domain.Cinema;
    import cinema.domain.ReturnedTicket;
    import cinema.domain.Seat;
    import cinema.domain.Views;
    import cinema.services.CinemaService;
    import com.fasterxml.jackson.annotation.JsonView;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RestController;


    class Token {
        private String token;

        public Token() {
        }

        public Token(String token) {
            this.token = token;
        }

        public String getToken() {
            return token;
        }

        public void setToken(String token) {
            this.token = token;
        }
    }

    @RestController
    public class CinemaController {

        CinemaService cinemaService = new CinemaService();


        @GetMapping("/seats")
        @JsonView(Views.RowColumnPrice.class)
        public Cinema getSeats() {
            return cinemaService.getSeats();
        }

        @PostMapping("/purchase")
        @JsonView(Views.Full.class)
        public ResponseEntity<Seat> buyTicket(@RequestBody Seat seat) {
            return ResponseEntity.ok(cinemaService.buyTicket(seat));
        }

        @PostMapping("/return")
        public ResponseEntity<ReturnedTicket> returnTicket(@RequestBody Token token) {
            return ResponseEntity.ok(cinemaService.returnTicket(token.getToken()));
        }
    }
  learner_created: true
- name: src/cinema/domain/Seat.java
  visible: true
  text: |-
    package cinema.domain;

    import com.fasterxml.jackson.annotation.JsonView;

    import java.util.Objects;
    import java.util.UUID;

    public class Seat {

        @JsonView(Views.Full.class)
        private UUID token;

        @JsonView(Views.RowColumnPrice.class)

        private int row;
        @JsonView(Views.RowColumnPrice.class)
        private int column;
        @JsonView(Views.RowColumnPrice.class)
        private int price;

        @JsonView(Views.Full.class)
        private Ticket ticket;

        public Seat() {
        }

        public Seat(int row, int column) {
            this.row = row;
            this.column = column;
            this.price = selectPrice();
            this.ticket = new Ticket(row, column, price);
        }


        private int selectPrice() {
            return row <= 4 ? 10 : 8;
        }

        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }

        public int getPrice() {
            return price;
        }

        public void setPrice() {
            this.price = selectPrice();
        }

        @Override
        public String toString() {
            return "Seat{" +
                    "token=" + token +
                    ", row=" + row +
                    ", column=" + column +
                    ", price=" + price +
                    ", ticket=" + ticket +
                    '}';
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Seat seat = (Seat) o;
            return row == seat.row && column == seat.column && price == seat.price && Objects.equals(token, seat.token) && Objects.equals(ticket, seat.ticket);
        }

        @Override
        public int hashCode() {
            return Objects.hash(token, row, column, price, ticket);
        }

        public UUID getToken() {
            return token;
        }

        public void setToken(UUID token) {
            this.token = token;
        }

        public Ticket getTicket() {
            return ticket;
        }

        public void setTicket(Ticket ticket) {
            this.ticket = ticket;
        }
    }
  learner_created: true
- name: src/cinema/domain/Ticket.java
  visible: true
  text: |
    package cinema.domain;

    import java.util.Objects;

    public class Ticket {

        private int row;
        private int column;
        private int price;

        public Ticket(int row, int column, int price) {
            this.row = row;
            this.column = column;
            this.price = price;
        }

        @Override
        public String toString() {
            return "Ticket{" +
                    "row=" + row +
                    ", column=" + column +
                    ", price=" + price +
                    '}';
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Ticket ticket = (Ticket) o;
            return row == ticket.row && column == ticket.column && price == ticket.price;
        }

        @Override
        public int hashCode() {
            return Objects.hash(row, column, price);
        }

        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }

        public int getPrice() {
            return price;
        }

        public void setPrice(int price) {
            this.price = price;
        }
    }
  learner_created: true
- name: src/cinema/domain/Cinema.java
  visible: true
  text: |-
    package cinema.domain;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonProperty;

    import java.util.ArrayList;
    import java.util.List;

    public class Cinema {
        @JsonProperty("total_rows")
        private int totalRows;
        @JsonProperty("total_columns")
        private int totalColumns;
        @JsonProperty("available_seats")
        private List<Seat> availableSeats;
        @JsonIgnore
        private final List<Seat> reservedSeats;

        public Cinema(int totalColumns, int totalRows) {

            this.totalColumns = totalColumns;
            this.totalRows = totalRows;
            this.availableSeats = generateSeats();
            this.reservedSeats = new ArrayList<>();
        }


        private List<Seat> generateSeats() {
            List<Seat> seats = new ArrayList<>();
            for (int i = 1; i <= totalRows; i++) {
                for (int j = 1; j <= totalColumns; j++) {
                    seats.add(new Seat(i, j));
                }
            }
            return seats;
        }

        public List<Seat> getReservedSeats() {
            return reservedSeats;
        }

        public void setReservedSeats(Seat buyingSeat) {
            reservedSeats.add(buyingSeat);
        }

        public List<Seat> getAvailableSeats() {
            return availableSeats;
        }

        public void setAvailableSeats(Seat buyingSeat) {
            availableSeats.removeIf(availableSeat -> availableSeat.getRow() == buyingSeat.getRow() && availableSeat.getColumn() == buyingSeat.getColumn());

        }
        public int getTotalColumns() {
            return totalColumns;
        }

        public void setTotalColumns(int totalColumns) {
            this.totalColumns = totalColumns;
        }

        public int getTotalRows() {
            return totalRows;
        }

        public void setTotalRows(int totalRows) {
            this.totalRows = totalRows;
        }


        @Override
        public String toString() {
            return "Cinema{" +
                    "totalRows=" + totalRows +
                    ", totalColumns=" + totalColumns + "\n" +
                    ", availableSeats=" + availableSeats +  "\n" +
                    ", reservedSeats=" + reservedSeats +  "\n" +
                    '}' + "\n";
        }
    }
  learner_created: true
- name: src/cinema/services/CinemaService.java
  visible: true
  text: |-
    package cinema.services;

    import cinema.BuiyngException;
    import cinema.domain.Cinema;
    import cinema.domain.ReturnedTicket;
    import cinema.domain.Seat;
    import cinema.domain.Ticket;

    import java.util.UUID;

    public class CinemaService {

        private Cinema cinema;


        public CinemaService() {
            cinema = new Cinema(9, 9);
        }

        public Cinema getSeats() {
            return cinema;
        }

        public Seat buyTicket(Seat seat) {
            seat.setPrice();
            seat.setToken(UUID.randomUUID());
            seat.setTicket(new Ticket(seat.getRow(), seat.getColumn(), seat.getPrice()));
            for (Seat reservedSeat : cinema.getReservedSeats()) {
                if (reservedSeat.getColumn() == seat.getColumn() && seat.getRow() == reservedSeat.getRow()) {
                    throw new BuiyngException("The ticket has been already purchased!");
                }
            }
            if (seat.getRow() > 9 || seat.getRow() < 1 || (seat.getColumn() > 9 || seat.getColumn() < 1)) {
                throw new ArrayIndexOutOfBoundsException("The number of a row or a column is out of bounds!");

            } else {
                cinema.setReservedSeats(seat);
                cinema.setAvailableSeats(seat);

                return seat;
            }
        }

        public ReturnedTicket returnTicket(String token) {
            if (cinema.getReservedSeats().size() != 0) {
                for (Seat reservedSeat : cinema.getReservedSeats()) {
                    System.out.println(reservedSeat.getToken().toString());
                    if (reservedSeat.getToken().toString().equalsIgnoreCase(token)) {
                        cinema.getReservedSeats().remove(reservedSeat);
                        System.out.println(cinema.getReservedSeats().size());
                        return new ReturnedTicket(reservedSeat.getRow(), reservedSeat.getColumn(), reservedSeat.getPrice());
                    }
                }
                throw new BuiyngException("Wrong token!");
            }
            throw new BuiyngException("Wrong token!");
        }
    }
  learner_created: true
- name: src/cinema/domain/Stats.java
  visible: true
  learner_created: true
- name: src/cinema/exceptions/BuiyngException.java
  visible: true
  text: |-
    package cinema;

    public class BuiyngException extends RuntimeException {


        private String message;

        public BuiyngException() {
        }

        public BuiyngException(String message) {
            this.message = message;
        }

        public String getMessage() {
            return message;
        }

        public void setMessage(String message) {
            this.message = message;
        }
    }
  learner_created: true
- name: src/cinema/exceptions/UnauthorizedException.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13378#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Tue, 09 Aug 2022 10:39:05 UTC
record: -1
